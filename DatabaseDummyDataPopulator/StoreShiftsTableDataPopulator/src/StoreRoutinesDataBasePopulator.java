import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;

public class StoreRoutinesDataBasePopulator
{
    private static Map<String, String> nameMap = new HashMap<>();
    private static Map<String, String> descriptionMap = new HashMap<>();
    public static void main(String[] args) throws SQLException {
        createNameAndDescriptionMap();
        Connection connection = createDBConnection();
        populateStoreRoutinesDB(connection);

    }

    private static void createNameAndDescriptionMap(){
        nameMap.put("gsr", "Gap Scan Routine");
        descriptionMap.put("gsr", "Look for gaps on shelves and make a report of the empty spots in shelves");
        nameMap.put("gor", "Gap Order Routine");
        descriptionMap.put("gor", "Create gap orders by looking at the gap scan report generated by gap scan routine");
        nameMap.put("grr", "Gap Reset Routine");
        descriptionMap.put("grr","Created for products that have been scanned as a gap more than once in gsr");
        nameMap.put("cscr", "Counting Scheduled Count Routine");
        descriptionMap.put("cscr","Grocery and GM scheduled low and overs routine");
        nameMap.put("cor", "Counting Overstock Routine");
        descriptionMap.put("cor", "Reviewing overstocks in store");
        nameMap.put("cftcr", "Counting Fresh Target Count Routine");
        descriptionMap.put("cftcr", "Number of products that are believed to have a corrupt stock record");
    }

    private static Connection createDBConnection() {
        Connection connection = null;
        Statement stmt = null;

        try {
            Class.forName("org.postgresql.Driver");
            connection = DriverManager
                    .getConnection("jdbc:postgresql://localhost:5432/postgres",
                            "postgres", "postgres");

        } catch (Exception e) {
            e.printStackTrace();
        }
        return connection;
    }
    private static void createDB(Connection connection) throws SQLException {
        Statement stmt = null;
        stmt = connection.createStatement();
        String sql = "CREATE TABLE \"RetailStoreScheduleSystem\".store_routines" +
                "(ID VARCHAR(50) PRIMARY KEY     NOT NULL," +
                " name VARCHAR(50)   NOT NULL, " +
                " description   VARCHAR(500)    NOT NULL, " +
                "created_at     timestamp   NOT NULL)";
        stmt.executeUpdate(sql);
        stmt.close();
    }

    private static void populateStoreRoutinesDB(Connection connection) throws SQLException {
        onAddStoreRoutineButtonClicked(connection, "gsr1", "2019/06/16 16:07:12");
    }
    private static String getRoutineName(String routineId)
    {
        if(routineId.startsWith("gsr"))
        {
            return nameMap.get("gsr");
        }
        else if(routineId.startsWith("grr"))
        {
            return nameMap.get("grr");
        }
        else if(routineId.startsWith("cscr"))
        {
            return nameMap.get("cscr");
        }
        else if(routineId.startsWith("cor"))
        {
            return nameMap.get("cor");
        }
        else if(routineId.startsWith("cftcr"))
        {
            return nameMap.get("cftcr");
        }
        return null;
    }
    private static String getRoutineDescription(String routineId)
    {
        if(routineId.startsWith("gsr"))
        {
            return descriptionMap.get("gsr");
        }
        else if(routineId.startsWith("grr"))
        {
            return descriptionMap.get("grr");
        }
        else if(routineId.startsWith("cscr"))
        {
            return descriptionMap.get("cscr");
        }
        else if(routineId.startsWith("cor"))
        {
            return descriptionMap.get("cor");
        }
        else if(routineId.startsWith("cftcr"))
        {
            return descriptionMap.get("cftcr");
        }
        return null;
    }
    private static void onAddStoreRoutineButtonClicked(Connection connection, String routineId, String timestamp) throws SQLException {
        Statement statement = null;
        String routineName = getRoutineName(routineId);
        String routineDescription = getRoutineDescription(routineId);

        statement = connection.createStatement();
        String sql = "INSERT INTO \"RetailStoreScheduleSystem\".store_routines (ID,name,description,created_at) "
                + "VALUES ('" + routineId + "','" + routineName + "','" + routineDescription + "','" + timestamp + "');";
        if(routineDescription!=null && routineName!=null)
        {
            statement.executeUpdate(sql);
        }
    }

}